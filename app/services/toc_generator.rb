# Use the Nokogiri gem to generate the table of contents from the HTML content of the body (content)
# Using the default trix editor, using the Title button provides a h1 tag,
# search through the body content and generate the table of contents from the h1 tags content.
# Add the same id attribute to the h1 tags so that we can link to them from the table of contents.
class TocGenerator
  # Initialize a new TocGenerator with the given body string.
  #
  # @param [String] body the body content to generate the table of contents from.
  def initialize(body)
    @body = body
  end

  # Returns a hash with keys :toc and :body.
  #
  # The :toc key maps to a string containing a table of contents generated from
  # the headings in the body content.
  #
  # The :body key maps to the body content with the headings modified to have
  # ids matching the text of the headings, for linking from the table of
  # contents.
  def generate
    doc = Nokogiri::HTML::DocumentFragment.parse(@body)
    headings = doc.css("h1")

    return { toc: "", body: @body } if headings.empty?

    toc = generate_toc(headings)
    modified_body = modify_headings_with_ids(headings, doc)

    { toc: toc.html_safe, body: modified_body.html_safe }
  end

  private

  # Generates an HTML table of contents from the given headings.
  #
  # @param [Nokogiri::XML::NodeSet] headings a collection of h1 elements from
  #   which to generate the table of contents.
  # @return [String] an HTML string representing the table of contents, where
  #   each item links to the corresponding heading.

  def generate_toc(headings)
    toc = "<ul>"
    headings.each do |heading|
      id = heading.text.gsub(/\s+/, "-").downcase
      toc += "<li><a href='##{id}'>#{heading.text}</a></li>"
    end
    toc += "</ul>"
    toc
  end

  # Modifies the given headings by adding an id attribute to each one.
  #
  # The id is generated by downcasing the heading text and replacing any spaces
  # with hyphens. If the heading already has an id, we don't overwrite it.
  #
  # @param [Nokogiri::XML::NodeSet] headings a collection of h1 elements from
  #   which to generate the ids.
  # @param [Nokogiri::HTML::DocumentFragment] doc the document fragment in which
  #   the headings exist.
  # @return [String] the modified HTML document fragment as a string.
  def modify_headings_with_ids(headings, doc)
    headings.each do |heading|
      id = heading.text.gsub(/\s+/, "-").downcase
      heading["id"] = id unless heading["id"] # Only set id if it doesn't exist
    end
    doc.to_html
  end
end
